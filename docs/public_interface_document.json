{
  "package_name": "com.product_1.cat_app",
  "project_description": "The Flutter project is a virtual pet application that allows users to adopt and care for a digital pet. The app features a startup screen, a home screen, and various interactions such as feeding, playing, and putting the pet to sleep. It also includes custom dialogs and bottom sheets for displaying important information and alerts to the user.",
  "architecture_overview": "The application follows the Stacked architecture pattern, which separates the concerns of the UI, view models, and services. It uses the Stacked package for state management, routing, and dependency injection. The codebase is organized into feature-based folders, with each feature containing its own view, view model, and supporting widgets. The app also utilizes a centralized PetService for managing the pet's state and behavior.",
  "files": [
    {
      "name": "lib/app/app.dart",
      "description": "Defines the app structure using StackedApp annotation for routes, dependencies, bottom sheets, and dialogs. It includes routes (HomeView, StartupView), services (BottomSheetService, DialogService, NavigationService), bottom sheets (NoticeSheet), and dialogs (InfoAlertDialog). The file structure allows for easy addition of new services, routes, bottom sheets, and dialogs using the @stacked-import, @stacked-route, @stacked-service, @stacked-bottom-sheet, and @stacked-dialog annotations.",
      "class_diagram": "@startuml\nclass App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked_annotations.dart",
        "package:stacked_services/stacked_services.dart",
        "package:my_app/ui/bottom_sheets/notice/notice_sheet.dart",
        "package:my_app/ui/dialogs/info_alert/info_alert_dialog.dart",
        "package:my_app/features/home/home_view.dart",
        "package:my_app/features/startup/startup_view.dart"
      ]
    },
    {
      "name": "lib/features/app/app_view.dart",
      "description": "Defines the root widget of the application. So this files can not be deleted at all.",
      "class_diagram": "@startuml\nclass AppView\nclass _App\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/home/home_view.dart",
      "description": "The main home view of the application.",
      "class_diagram": "@startuml\nclass HomeView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/home/home_viewmodel.dart",
      "description": "ViewModel for the HomeView, manages the state and business logic.",
      "class_diagram": "@startuml\nclass HomeViewModel\n@enduml",
      "methods": [
        {
          "name": "incrementCounter",
          "description": "Increments the counter value",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showDialog",
          "description": "Shows a custom dialog",
          "parameters": [],
          "return_type": "void"
        },
        {
          "name": "showBottomSheet",
          "description": "Shows a custom bottom sheet",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_view.dart",
      "description": "The startup view shown when the app is first launched.",
      "class_diagram": "@startuml\nclass StartupView\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:gap/gap.dart"
      ]
    },
    {
      "name": "lib/features/startup/startup_viewmodel.dart",
      "description": "ViewModel for the StartupView, handles initialization logic.",
      "class_diagram": "@startuml\nclass StartupViewModel\n@enduml",
      "methods": [
        {
          "name": "runStartupLogic",
          "description": "Runs the startup logic and navigates to the home view",
          "parameters": [],
          "return_type": "Future"
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart"
      ]
    },
    {
      "name": "lib/main.dart",
      "description": "The entry point of the application. Sets up the app and runs it.",
      "class_diagram": "@startuml\nclass main\n@enduml",
      "methods": [
        {
          "name": "main",
          "description": "The main function that runs the app",
          "parameters": [],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:flutter/services.dart",
        "package:my_app/app/app.bottomsheets.dart",
        "package:my_app/app/app.dialogs.dart",
        "package:my_app/app/app.locator.dart",
        "package:my_app/features/app/app_view.dart"
      ]
    },
    {
      "name": "lib/ui/common/app_colors.dart",
      "description": "This Dart file defines a set of constant color values that are used throughout the application's user interface (UI). These colors serve as a centralized color palette, ensuring consistent and visually coherent styling across the entire application.",
      "class_diagram": "",
      "methods": [],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/pet_animation.dart",
      "description": "The PetAnimation class is responsible for rendering an animated visual representation of a pet's current state, along with its name and a description of the state. This widget is used within the home screen of the cat app to provide an engaging and informative display of the user's pet.",
      "class_diagram": "@startuml\nclass PetAnimation {\n  -PetState state\n  -String name\n  +build(BuildContext context): Widget\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Constructs the visual representation of the pet's current state, including the emoji, name, and state description.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "cat_app/constants/pet_states.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/pet_status_bar.dart",
      "description": "The PetStatusBar widget is responsible for displaying the current status of a pet, including its health, hunger, happiness, and energy levels. This widget is used within the Home screen of the cat app to provide users with a quick overview of their pet's well-being.",
      "class_diagram": "@startuml\nclass PetStatusBar extends StatelessWidget {\n  final Pet pet;\n  PetStatusBar({required this.pet});\n  Widget build(BuildContext context)\n  Widget _buildStatusBar(String label, int value, Color color)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the PetStatusBar widget, which displays the pet's current status using a series of progress bars.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildStatusBar",
          "description": "Builds a single status bar widget for a given label, value, and color.",
          "parameters": [
            "String label",
            "int value",
            "Color color"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "cat_app/models/pet.dart"
      ]
    },
    {
      "name": "lib/services/pet_service.dart",
      "description": "The `PetService` class is responsible for managing the state and behavior of a virtual pet within the application. It provides the core functionality for initializing, updating, and interacting with the pet, ensuring that the pet's attributes (hunger, happiness, energy, and health) are properly maintained and transformed over time.",
      "class_diagram": "@startuml\nclass PetService {\n  - Pet? _currentPet\n  - Timer? _decayTimer\n  - final _decayInterval = Duration(minutes: 1)\n  + Pet? get currentPet\n  + void initializePet(String name)\n  - void _startDecayTimer()\n  - void _updatePetStats()\n  - PetState _determineState(int hunger, int happiness, int energy, int health)\n  + void feed()\n  + void play()\n  + void sleep()\n  + void dispose()\n}\n@enduml",
      "methods": [
        {
          "name": "initializePet",
          "description": "Initializes a new pet with the given name and starts the decay timer to periodically update the pet's stats.",
          "parameters": [
            "String name"
          ],
          "return_type": "void"
        },
        {
          "name": "_startDecayTimer",
          "description": "Starts the timer that periodically updates the pet's stats.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "_updatePetStats",
          "description": "Updates the pet's hunger, happiness, energy, and health based on the time elapsed since the last update.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "_determineState",
          "description": "Determines the current state of the pet based on its hunger, happiness, energy, and health levels.",
          "parameters": [
            "int hunger",
            "int happiness",
            "int energy",
            "int health"
          ],
          "return_type": "PetState"
        },
        {
          "name": "feed",
          "description": "Increases the pet's hunger level and updates the last fed timestamp.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "play",
          "description": "Increases the pet's happiness level, decreases its energy level, and updates the last played timestamp.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "sleep",
          "description": "Increases the pet's energy level and updates the last slept timestamp.",
          "parameters": null,
          "return_type": "void"
        },
        {
          "name": "dispose",
          "description": "Cancels the decay timer and resets the current pet.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "dart:async",
        "package:cat_app/models/pet.dart",
        "package:cat_app/constants/pet_states.dart"
      ]
    },
    {
      "name": "lib/features/home/widgets/pet_actions.dart",
      "description": "This Dart file defines the `PetActions` widget, which is responsible for displaying a set of action buttons that allow the user to interact with a virtual pet. The main purpose of this widget is to provide a centralized UI component for managing the pet's various actions, such as feeding, playing, and sleeping.",
      "class_diagram": "@startuml\nclass PetActions {\n  -VoidCallback onFeed\n  -VoidCallback onPlay\n  -VoidCallback onSleep\n  +Widget build(BuildContext context)\n  -Widget _buildActionButton(VoidCallback onPressed, IconData icon, String label, Color color)\n}\n@enduml",
      "methods": [
        {
          "name": "build",
          "description": "Builds the UI for the `PetActions` widget, which displays a row of action buttons for feeding, playing, and putting the pet to sleep.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "Widget"
        },
        {
          "name": "_buildActionButton",
          "description": "Builds a single action button with the provided icon, label, and color.",
          "parameters": [
            "VoidCallback onPressed",
            "IconData icon",
            "String label",
            "Color color"
          ],
          "return_type": "Widget"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet_model.dart",
      "description": "The `NoticeSheetModel` class is a view model that manages the state and behavior of the notice bottom sheet in the application. It is responsible for handling the display and interaction with the notice sheet, which is a common UI component used to communicate important information to the user.",
      "class_diagram": "@startuml\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/models/pet.dart",
      "description": "The `Pet` class represents the core entity of a virtual pet application. It encapsulates the key attributes and state of a pet, which can be used to model the pet's lifecycle, behavior, and interactions within the application.",
      "class_diagram": "@startuml\nclass Pet {\n  -String name\n  -int hunger\n  -int happiness\n  -int energy\n  -int health\n  -PetState state\n  -DateTime lastFed\n  -DateTime lastPlayed\n  -DateTime lastSlept\n  +Pet copyWith()\n  +static Pet initial(String name)\n}\n@enduml",
      "methods": [
        {
          "name": "copyWith",
          "description": "Creates a new `Pet` instance with the specified changes, allowing the caller to easily update the pet's properties without recreating the entire object.",
          "parameters": [
            "String? name",
            "int? hunger",
            "int? happiness",
            "int? energy",
            "int? health",
            "PetState? state",
            "DateTime? lastFed",
            "DateTime? lastPlayed",
            "DateTime? lastSlept"
          ],
          "return_type": "Pet"
        },
        {
          "name": "initial",
          "description": "Factory constructor that creates a new `Pet` instance with initial default values, such as full hunger, happiness, energy, and health, and the current timestamp for the last fed, played, and slept times.",
          "parameters": [
            "String name"
          ],
          "return_type": "Pet"
        }
      ],
      "dependencies": [
        "equatable",
        "cat_app/constants/pet_states.dart"
      ]
    },
    {
      "name": "lib/ui/bottom_sheets/notice/notice_sheet.dart",
      "description": "This Dart file defines the `NoticeSheet` class, which is responsible for rendering a bottom sheet with a notice message. The bottom sheet is typically used to display important information or alerts to the user.",
      "class_diagram": "@startuml\nclass NoticeSheet extends StackedView<NoticeSheetModel> {\n  + NoticeSheet({Key? key, Function(SheetResponse)? completer, SheetRequest request})\n  + builder(BuildContext context, NoticeSheetModel viewModel, Widget? child): Widget\n  + viewModelBuilder(BuildContext context): NoticeSheetModel\n}\n\nclass NoticeSheetModel extends BaseViewModel {\n}\n@enduml",
      "methods": [
        {
          "name": "NoticeSheet",
          "description": "Constructor for the `NoticeSheet` class. Accepts a `completer` function and a `SheetRequest` object, which are used to handle the bottom sheet's response and configure the sheet's content.",
          "parameters": [
            "Key? key",
            "Function(SheetResponse)? completer",
            "SheetRequest request"
          ],
          "return_type": null
        },
        {
          "name": "builder",
          "description": "Builds the UI for the `NoticeSheet` by creating a `Container` with a white background, rounded corners, and displaying the title and description from the `SheetRequest` object.",
          "parameters": [
            "BuildContext context",
            "NoticeSheetModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "Provides a new instance of `NoticeSheetModel` to the `StackedView` for this bottom sheet.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "NoticeSheetModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:cat_app/ui/bottom_sheets/notice/notice_sheet_model.dart",
        "package:cat_app/ui/common/app_colors.dart",
        "package:cat_app/ui/common/ui_helpers.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog.dart",
      "description": "The `InfoAlertDialog` class is responsible for displaying a customizable dialog box with an informational message and a button to close the dialog. This dialog is commonly used to provide users with important information or updates within the application.",
      "class_diagram": "@startuml\nclass InfoAlertDialog {\n  +final DialogRequest request\n  +final Function(DialogResponse) completer\n  +builder(BuildContext context, InfoAlertDialogModel viewModel, Widget? child)\n  +viewModelBuilder(BuildContext context): InfoAlertDialogModel\n}\n\nclass InfoAlertDialogModel {\n}\n\nInfoAlertDialog .down. InfoAlertDialogModel\n@enduml",
      "methods": [
        {
          "name": "builder",
          "description": "The `builder` method is responsible for creating the UI of the `InfoAlertDialog`. It takes in the `DialogRequest`, which contains the title and description of the dialog, and renders the dialog with a custom graphic and a 'Got it' button to close the dialog.",
          "parameters": [
            "BuildContext context",
            "InfoAlertDialogModel viewModel",
            "Widget? child"
          ],
          "return_type": "Widget"
        },
        {
          "name": "viewModelBuilder",
          "description": "The `viewModelBuilder` method is responsible for creating an instance of the `InfoAlertDialogModel`, which is used to manage the state and behavior of the dialog.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "InfoAlertDialogModel"
        }
      ],
      "dependencies": [
        "package:flutter/material.dart",
        "package:stacked/stacked.dart",
        "package:stacked_services/stacked_services.dart",
        "package:cat_app/ui/common/app_colors.dart",
        "package:cat_app/ui/common/ui_helpers.dart",
        "package:cat_app/ui/dialogs/info_alert/info_alert_dialog_model.dart"
      ]
    },
    {
      "name": "lib/ui/dialogs/info_alert/info_alert_dialog_model.dart",
      "description": "This Dart file defines the `InfoAlertDialogModel` class, which is responsible for managing the state and functionality of an information alert dialog in a Flutter application.",
      "class_diagram": "@startuml\nclass InfoAlertDialogModel extends BaseViewModel {\n}\n@enduml",
      "methods": [],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/features/app/app_viewmodel.dart",
      "description": "This file defines the `AppViewModel` class, which is a base view model for the app-level functionality in a Flutter application. It serves as a foundation for managing the state and logic related to the overall application.",
      "class_diagram": "@startuml\nclass AppViewModel {\n}\nAppViewModel --|> BaseViewModel\n@enduml",
      "methods": [
        {
          "name": "N/A",
          "description": "The `AppViewModel` class does not define any public methods. It inherits from `BaseViewModel` from the `stacked` package, which provides basic functionality for a view model.",
          "parameters": null,
          "return_type": null
        }
      ],
      "dependencies": [
        "package:stacked/stacked.dart"
      ]
    },
    {
      "name": "lib/constants/pet_states.dart",
      "description": "This Dart file defines the core state and functionality for managing the state of a pet in a Flutter/Dart application. It provides a centralized and consistent way to represent and interact with the different states a pet can be in, such as normal, happy, sad, sleeping, sick, hungry, playing, and dead.",
      "class_diagram": "@startuml\nclass PetState {\n  + normal\n  + happy\n  + sad\n  + sleeping\n  + sick\n  + hungry\n  + playing\n  + dead\n}\n\nclass PetStateExtension {\n  + emoji() : String\n  + description() : String\n}\n@enduml",
      "methods": [
        {
          "name": "emoji",
          "description": "Returns the corresponding emoji for the given pet state",
          "parameters": null,
          "return_type": "String"
        },
        {
          "name": "description",
          "description": "Returns the corresponding description for the given pet state",
          "parameters": null,
          "return_type": "String"
        }
      ],
      "dependencies": []
    },
    {
      "name": "lib/app/app.dialogs.dart",
      "description": "This file is responsible for managing and registering custom dialog builders for the application. It provides a centralized way to handle different types of dialogs, ensuring consistency and reusability across the app.",
      "class_diagram": "@startuml\n\nclass DialogService {\n  +registerCustomDialogBuilders(Map<DialogType, DialogBuilder>)\n}\n\nclass DialogType {\n  +infoAlert\n}\n\nclass InfoAlertDialog {\n  +InfoAlertDialog(request, completer)\n}\n\nDialogService -down-> DialogType : Registers builders for\nDialogType -down-> InfoAlertDialog : Builds\n\n@enduml",
      "methods": [
        {
          "name": "setupDialogUi",
          "description": "This method sets up the custom dialog builders for the application. It registers the dialog builders with the DialogService, allowing them to be used throughout the app.",
          "parameters": [
            "context",
            "request",
            "completer"
          ],
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "ui/dialogs/info_alert/info_alert_dialog.dart"
      ]
    },
    {
      "name": "lib/app/app.locator.dart",
      "description": "This file is responsible for setting up and managing the dependency injection (DI) system for the Flutter application using the Stacked architecture pattern. It is a generated file that is part of the Stacked package, which provides a set of utilities for building scalable and maintainable Flutter applications.",
      "class_diagram": "",
      "methods": [
        {
          "name": "setupLocator",
          "description": "This method sets up the DI system by registering various services and dependencies with the Stacked locator. It allows the application to access these services throughout the codebase.",
          "parameters": [
            "environment",
            "environmentFilter"
          ],
          "return_type": "Future<void>"
        }
      ],
      "dependencies": [
        "stacked_services/src/bottom_sheet/bottom_sheet_service.dart",
        "stacked_services/src/dialog/dialog_service.dart",
        "stacked_services/src/navigation/navigation_service.dart",
        "stacked_shared/stacked_shared.dart"
      ]
    },
    {
      "name": "lib/app/app.bottomsheets.dart",
      "description": "This Dart file is responsible for setting up the bottom sheet UI and functionality in the application. It defines the available bottom sheet types, associates them with their corresponding UI components, and registers them with the BottomSheetService from the stacked_services package.",
      "class_diagram": "@startuml\n  class BottomSheetType {\n    + notice\n  }\n\n  class NoticeSheet {\n    + NoticeSheet(request, completer)\n  }\n\n  class BottomSheetService {\n    + setCustomSheetBuilders(builders)\n  }\n\n  BottomSheetType -> NoticeSheet : creates\n  BottomSheetService -> NoticeSheet : creates\n  @enduml",
      "methods": [
        {
          "name": "setupBottomSheetUi",
          "description": "Configures the bottom sheet service by setting up custom sheet builders for the available bottom sheet types.",
          "parameters": null,
          "return_type": "void"
        }
      ],
      "dependencies": [
        "stacked_services/stacked_services.dart",
        "app.locator.dart",
        "../ui/bottom_sheets/notice/notice_sheet.dart"
      ]
    },
    {
      "name": "lib/ui/common/ui_helpers.dart",
      "description": "This Dart file provides a set of utility functions and widgets that help with the layout and styling of user interface elements in a Flutter application. It serves as a centralized location for common UI-related functionality, promoting code reuse and consistency across the project.",
      "class_diagram": "@startuml\nclass UIHelpers {\n  + static const double _tinySize\n  + static const double _smallSize\n  + static const double _mediumSize\n  + static const double _largeSize\n  + static const double _massiveSize\n  + static const Widget horizontalSpaceTiny\n  + static const Widget horizontalSpaceSmall\n  + static const Widget horizontalSpaceMedium\n  + static const Widget horizontalSpaceLarge\n  + static const Widget verticalSpaceTiny\n  + static const Widget verticalSpaceSmall\n  + static const Widget verticalSpaceMedium\n  + static const Widget verticalSpaceLarge\n  + static const Widget verticalSpaceMassive\n  + static Widget spacedDivider\n  + static Widget verticalSpace(double height)\n  + static double screenWidth(BuildContext context)\n  + static double screenHeight(BuildContext context)\n  + static double screenHeightFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double screenWidthFraction(BuildContext context, {int dividedBy = 1, double offsetBy = 0, double max = 3000})\n  + static double halfScreenWidth(BuildContext context)\n  + static double thirdScreenWidth(BuildContext context)\n  + static double quarterScreenWidth(BuildContext context)\n  + static double getResponsiveHorizontalSpaceMedium(BuildContext context)\n  + static double getResponsiveSmallFontSize(BuildContext context)\n  + static double getResponsiveMediumFontSize(BuildContext context)\n  + static double getResponsiveLargeFontSize(BuildContext context)\n  + static double getResponsiveExtraLargeFontSize(BuildContext context)\n  + static double getResponsiveMassiveFontSize(BuildContext context)\n  + static double getResponsiveFontSize(BuildContext context, {double? fontSize, double? max})\n}\n@enduml",
      "methods": [
        {
          "name": "horizontalSpaceTiny",
          "description": "A constant widget that provides a small horizontal spacing.",
          "parameters": null,
          "return_type": "Widget"
        },
        {
          "name": "screenWidth",
          "description": "Retrieves the width of the screen.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "screenHeightFraction",
          "description": "Calculates a fraction of the screen height based on the provided parameters.",
          "parameters": [
            "BuildContext context",
            "int dividedBy = 1",
            "double offsetBy = 0",
            "double max = 3000"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveHorizontalSpaceMedium",
          "description": "Calculates a responsive horizontal spacing value based on the screen width.",
          "parameters": [
            "BuildContext context"
          ],
          "return_type": "double"
        },
        {
          "name": "getResponsiveFontSize",
          "description": "Calculates a responsive font size based on the screen width.",
          "parameters": [
            "BuildContext context",
            "double? fontSize",
            "double? max"
          ],
          "return_type": "double"
        }
      ],
      "dependencies": [
        "dart:math",
        "package:flutter/material.dart"
      ]
    },
    {
      "name": "lib/app/app.router.dart",
      "description": "This file is responsible for managing the navigation and routing in the Flutter application. It defines the available routes, their associated screens, and provides navigation methods to transition between them.",
      "class_diagram": "@startuml\nclass Routes {\n  +static final homeView: String\n  +static final startupView: String\n  +static final all: Set<String>\n}\n\nclass StackedRouter extends RouterBase {\n  +routes: List<RouteDef>\n  +pagesMap: Map<Type, StackedRouteFactory>\n}\n\nclass NavigationServiceExtension {\n  +navigateToHomeView()\n  +navigateToStartupView()\n  +replaceWithHomeView()\n  +replaceWithStartupView()\n}\n@enduml",
      "methods": [
        {
          "name": "navigateToHomeView",
          "description": "Navigates to the HomeView screen",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "navigateToStartupView",
          "description": "Navigates to the StartupView screen",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithHomeView",
          "description": "Replaces the current screen with the HomeView screen",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        },
        {
          "name": "replaceWithStartupView",
          "description": "Replaces the current screen with the StartupView screen",
          "parameters": [
            "routerId",
            "preventDuplicates",
            "parameters",
            "transition"
          ],
          "return_type": "Future<dynamic>"
        }
      ],
      "dependencies": [
        "cat_app/features/home/home_view.dart",
        "cat_app/features/startup/startup_view.dart",
        "flutter/material.dart",
        "stacked/stacked.dart",
        "stacked_services/stacked_services.dart"
      ]
    }
  ],
  "dependencies": [
    {
      "name": "flutter",
      "version": "sdk: flutter",
      "purpose": "Flutter framework"
    },
    {
      "name": "stacked",
      "version": "^3.4.0",
      "purpose": "Stacked architecture for state management and routing"
    },
    {
      "name": "stacked_services",
      "version": "^1.1.0",
      "purpose": "Services for Stacked architecture"
    },
    {
      "name": "gap",
      "version": "^2.0.0",
      "purpose": "Creating gaps in layouts"
    }
  ],
  "sequence_diagram": "@startuml\nactor User\nparticipant main\nparticipant AppView\nparticipant StartupView\nparticipant StartupViewModel\nparticipant HomeView\nparticipant HomeViewModel\nparticipant PetService\n\nUser -> main: Launch app\nmain -> AppView: Create and run\nAppView -> StartupView: Initialize\nStartupView -> StartupViewModel: Run startup logic\nStartupViewModel -> PetService: Initialize pet\nStartupViewModel -> HomeView: Navigate on completion\nHomeView -> HomeViewModel: Initialize\nHomeViewModel -> PetService: Get pet state\nUser -> HomeView: Interact (feed, play, sleep)\nHomeView -> HomeViewModel: Handle user actions\nHomeViewModel -> PetService: Update pet state\nHomeViewModel -> DialogService: Show dialog\nHomeViewModel -> BottomSheetService: Show bottom sheet\nPetService -> HomeViewModel: Notify of pet state changes\nHomeViewModel -> HomeView: Update UI\n@enduml",
  "state_management_flow": "The application uses the Stacked architecture for state management. The ViewModels (e.g., HomeViewModel, StartupViewModel) handle the business logic and state for their respective views. The app.locator.dart file sets up dependency injection, allowing the ViewModels to access services such as the PetService, DialogService, and BottomSheetService. The state of the pet is managed by the PetService, which updates the pet's attributes (hunger, happiness, energy, health) and notifies the ViewModels of any changes.",
  "navigation_flow": "The application starts with main.dart, which sets up the app and runs the AppView. The AppView initializes the Stacked architecture and shows the StartupView. After completing the startup logic, the StartupViewModel navigates to the HomeView. Navigation between views is handled by the Stacked Router defined in app.router.dart, which provides methods for navigating to and replacing the different screens in the app."
}